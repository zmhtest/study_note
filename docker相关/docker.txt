Docker学习笔记

docker只能装在64位平台上
查看系统是32还是64：
    getconf LONG_BIT
    i686和i386就是32位！！！

docker的安装：

	Ubuntu上安装：wget -qO- https://get.docker.com/ | sh
	
	查看docker版本：
		docker --version
	
	启动docker：
		sudo service docker start
	
	测试运行hello-world
		docker run hello-world
		
	镜像加速 /etc/docker/daemon.json	
		{
			"registry-mirrors": ["http://hub-mirror.c.163.com"]
		}
		
	镜像官方网站：
		https://hub.docker.com/r/openshift/base-centos7/
	
	拉取网络上的镜像到本地：
		docker pull openshift/base-centos7

利用现有的文件构建一个docker容器：
比如centos7，
    进入centos7目录，
    运行 docker build -t isoName .
    回车后，会根据dockfile中配置，去下载相关的依赖，应用，创建相应的目录，最终生成一个容器。
    
    
如果Dockfile文件不是在当前目录，需要指定路径。

查看镜像：docker images

查看docker run 的帮助：
docker help run 

D:\WWW\docker\docker-training\centos7>docker run -d -p 222:222 --name base(容器名) centos:7.1(镜像名)
c0dba16732e8ffb05cb03d230c724dcb74bc8d5ac140d8b3588fc747b714c50c

查看容器的运行情况：
docker ps 或者 docker ps -a

以交互的方式进入容器，并且执行bash命令
docker exec -it website /bin/bash(任何容器系统支持的命令)

错误处理：
Rpmdb checksum is invalid: dCDPT(pkg checksums): perl-Net-Daemon.noarch 0:0.48-5.el7 - u
在yum语句前添加：RUN rpm --rebuilddb &&

关闭容器：docker stop containerName
重启容器：docker restart containerName
开始运行已经存在的容器：docker start containerName

如果容器在挂载的时候指定了 -v 参数，当删除容器后，再次通过docker run 命令启动一个容器并指定 -v 参数时，原数据库的数据会再次挂载在新的容器中！！！

重要的数据，不要放在容器中，容器的销毁太容易了！！！

把自己的PHP项目部署到docker上：
项目的根目录要有Dockerfile文件
from csphere/php-fpm:5.4 #基于哪个镜像构建，如果本地有这个镜像会先从本地找，否则会从网上找

add init.sh /init.sh #拷贝文件到...

entrypoint ["/init.sh", "/usr/bin/supervisord", "-n", "-c", "/etc/supervisord.conf"] #先执行init.sh脚本，在运行supervisord，相当于运行php和nginx

php-fpm的Dockfile文件
#
# MAINTAINER        Carson,C.J.Zeong <zcy@nicescale.com>
# DOCKER-VERSION    1.6.2
#
# Dockerizing php-fpm: Dockerfile for building php-fpm images
#
FROM       centos:7.1
MAINTAINER Carson,C.J.Zeong <zcy@nicescale.com> #维护者的信息

# Set environment variable
ENV	APP_DIR /app #设置变量

#安装容器所需要的软件和依赖包
RUN rpm --rebuilddb && yum -y swap -- remove fakesystemd -- install systemd systemd-libs && \
        yum -y install nginx php-cli php-mysql php-pear php-ldap php-mbstring php-soap php-dom php-gd php-xmlrpc php-fpm php-mcrypt && \ 
	yum clean all

#复制当前目录的nginx_nginx.conf到容器指定目录    
ADD nginx_nginx.conf /etc/nginx/nginx.conf
ADD	nginx_default.conf /etc/nginx/conf.d/default.conf

ADD	php_www.conf /etc/php-fpm.d/www.conf
RUN	sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php.ini

#运行命令 mkdir、echo，创建目录、文件
RUN	mkdir -p /app && echo "<?php phpinfo(); ?>" > ${APP_DIR}/info.php

#指定容器对外暴露的端口为80
EXPOSE	80 443

ADD	supervisor_nginx.conf /etc/supervisor.conf.d/nginx.conf
ADD	supervisor_php-fpm.conf /etc/supervisor.conf.d/php-fpm.conf

ONBUILD ADD . /app
ONBUILD RUN chown -R nginx:nginx /app

---------

在csphere/php-fpm:5.4这个镜像的dockerfile中末尾有：
ONBUILD ADD . /app
ONBUILD RUN chown -R nginx:nginx /app
表示，当通过这个csphere/php-fpm:5.4镜像构建项目镜像时，会将项目下的所有文件拷贝到 /app目录，而这个目录在构建csphere/php-fpm时就已经创建。

exec "$@"#表示执行完这个脚本后，继续执行后面的命令

PS D:\WWW\docker\docker-training\wordpress> docker run -d -p 80:80 --name wordpress -e WORDPRESS_DB_HOST=172.17.0.2 -e WORDPRESS_DB_USER=admin -e
 WORDPRESS_DB_PASSWORD=csphere2015 csphere/wordpress:4.2

 在浏览器可以通过localhost:80来访问网站。
 
注意：WORDPRESS_DB_HOST=172.17.0.2 是指mysql容器的ip，每个容易都有同一网段的不同ip

通过-e指定传入的参数：而数据库的用户和密码实在dbserver容器中设置的 firstrun文件。如果用户名和密码不对，将打不开项目！！！
-e WORDPRESS_DB_USER=admin -e
 WORDPRESS_DB_PASSWORD=csphere2015

测试cmd
已交互的模式启动容器：并不会在后台运行，exit就是退出了容器。
PS D:\WWW\docker\docker-training\test> docker run -it testcmd:0.1
this is cmd

PS D:\WWW\docker\docker-training\test> docker run -it testcmd:0.1 /bin/bash
[root@7ad73ce6309c /]#
此时：bin/bash 覆盖cmd中定义的命令

在其他目录构建image：一定要有镜像的名称，dockerfile文件所在的目录
docker build -t testent .\testent\

根据镜像id删除镜像：强制删
 docker rmi -f cdd
 
 通过指定 --entrypoint 参数覆盖
 docker run -it --entrypoint=/bin/bash testent
[root@e125e5cb2700 /]# ls


构建内部的镜像服务：
docker run -d -p 5000:5000 --name registry centos:7.1

镜像命名规则：registry_url/dir/name:version

在云主机配置registry ：
如果提示：start: Rejected send message
表示权限不够，用sudo或者切换到root运行！！！

启动docker ：sudo service docker start
查看内网ip：ifconfig eth0

运行容器：docker run -d -p 5000:5000 --name registry registry:0.9.1

打标签：标签必须打成这样才能正确上传push
root@VM-0-3-ubuntu:/home# docker tag csphere/csphere:0.11.2 172.16.0.3:5000/csphere/csphere:0.11.2

浏览器访问：
193.112.134.36:1016
如果打不开，在云主机的控制页面->安全组设置放开端口

启动主机的registry
docker start registry

把本地打好 tag 的镜像推送到远程
docker push 172.16.0.3:5000/csphere/csphere:0.11.2

需要注意的是：当前文件夹必须要有docker-compose.yml才能正常创建up、启动start、停止stop、删除rm
根据docker-compos文件创建并启动多个容器
docker-compose up -d

一次关闭所有根据docker-compose启动的容器
docker-compose stop

根据docker-compose命令启动已经存在的容器：
docker-compose start

删除使用docker-compose创建容器
docker-compose rm 


拉取主机镜像仓库的镜像：
docker pull 172.16.0.3:5000/unbuntu/centos:7.1.1053



15218401303@163.com
zmh123

如何确保开发和测试的环境完全一样？
我们交付给测试人员的不仅是代码，还有打包好运行环境。

Ubuntu配置SecureCRT使用root用户登录

    1、sudo passwd <root></root>

    2、安装ssh
    apt-get install openserver-ssh
    修改配置文件
    命令行[终端]进入目录：/etc/ssh
    修改文件 sshd_config
    注释掉 PermitRootlogin ..
    添加一行 PermitRootLogin yes 保存文件退出

    3、重启ssh服务    
    service ssh restart 

查看镜像对应的端口：docker port 镜像id[镜像名]
root@VM-0-3-ubuntu:~# docker port registry
5000/tcp -> 0.0.0.0:5000

查看容器的进程信息：
docker top registry

查看日志：docker logs registry

查看容器的资源使用情况：
docker stats containerName

CONTAINER           CPU %               MEM USAGE/LIMIT       MEM % 

运行一个不存在的容器，会自动从docker hub上下载，并运行：
docker run -d -p 5000:5000 training/webapp python app.py

检查容器的底层信息：返回一个json数组
docker inspect registry

根据已有的镜像创建一个新的镜像：
docker commit -m="has update" -a="zmh"  registry zmh/ubuntu:v2

开启Jenkins镜像：
docker run -d -p 8080:8080 --name jenkins -v /usr/bin/docker:/usr/bin/docker -v /var/run/docker.sock:/var/run/docker.sock -v /root/maven_tar:/root csphere/jenkins:1.609


问题：https问题
修改Docker配置文件
vim /etc/default/docker
增加以下一行
DOCKER_OPTS="$DOCKER_OPTS --insecure-registry=104.131.173.242:5000"
重启Docker
sudo service docker restart

改成如下才能成功！！！
FROM       csphere/centos:7.1
MAINTAINER Carson,C.J.Zeong <zcy@nicescale.com>

# Set environment variable
ENV	APP_DIR /app

#一定要加 -y 参数
RUN	yum clean all && yum swap -y fakesystemd systemd && yum -y install nginx php-cli php-mysql php-pear php-ldap php-mbstring php-soap php-dom php-gd php-xmlrpc php-fpm php-mcrypt && \ 
	yum clean all

ADD nginx_nginx.conf /etc/nginx/nginx.conf
ADD	nginx_default.conf /etc/nginx/conf.d/default.conf

ADD	php_www.conf /etc/php-fpm.d/www.conf
RUN	sed -i 's/;cgi.fix_pathinfo=1/cgi.fix_pathinfo=0/' /etc/php.ini

RUN	mkdir -p /app && echo "<?php phpinfo(); ?>" > ${APP_DIR}/info.php

EXPOSE	80 443

ADD	supervisor_nginx.conf /etc/supervisor.conf.d/nginx.conf
ADD	supervisor_php-fpm.conf /etc/supervisor.conf.d/php-fpm.conf

ONBUILD ADD . /app
ONBUILD RUN chown -R nginx:nginx /app





































































































































