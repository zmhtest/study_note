### 动力节点Java基础教程

第一课：
sun:斯坦福大学网络

Java底层是C++


GC：自动垃圾回收机制，只有垃圾到一定程度时才会自动回收，所以不是很灵活。

内存泄漏：申请了内存，但是忘记了释放，时间长了就会占用越来越多的内存，所以程序会越来越慢。

JVM：Java虚拟机，可以跨平台运行的原因就是在不同的平台有着不同的Java虚拟机。

Java的加载与执行
.java文件（源文件）-> .class文件（字节码文件，并不是二进制文件，是一个检查语法的过程，编译过程）-> 类装载器 -> Java虚拟机 -> 操作系统 -> 硬件平台 

编译时阶段和运行时阶段

JDK目录介绍：
Java运行库目录：
C:\Program Files\Java\jdk1.8.0_121\jre\lib\rt.jar

通过模仿源码来提高编程能力

bin:Java javac等可执行文件的路径。

Java源文件路径：C:\Program Files\Java\jdk1.8.0_121\src.jar

PATH的配置：
用户变量：只对当前的用户起作用
系统变量：对这台计算机的所有变量都起作用
所以，我们一般配置用户变量。

新建用户变量：PATH，然后贴上路径。

注意：配完环境变量，需要把窗口关闭后，再打开才能生效。路径之间用分号 ; 隔开

javac后面加的是一个路径，可以是相对路径和绝对路径。
如果是在当前目录下运行javac，只需要 Javac 源文件.java 即可。

Java后面加的是类名，永远是类名，不是.class字节码文件！
使用 Java ClassName 的执行过程：启动Java虚拟机，找到ClassName对应的字节码文件，装载类，运行类里面的 main 方法。 

默认情况下在当前目录下找 .class 文件。

classpath的作用就是给Java虚拟机指路的，可以配置多个，一般不用配置。

Java类体中不能直接写Java语句，只能在方法中写Java语句。

Strings[] args 是方法的参数，不一定是args，可以是aaa，没影响。

public class 和 class的区别：
一个 .java 源文件可以定义多个类，这个源文件有多少个类，编译后就会生成多少个 .class 文件。

public的class的名字必须和文件名保持一致，所以一个源文件只能有一个 public class ClassName ，且ClassName要和文件名保持一致。

一个java类文件可以写多个类，但是只能有一个public修饰的类，所有的类中都要有一个main方法，只有具有main方法的类，编译后才能通过 java 类名 的方式运行。

文件名必须要与public修饰的类名一致！！！

java语言特性：
	简单性
	面向对象
	可移植性
	健壮

第二课：

标识符：可以自己命名的部分。

大小写敏感，不能以数字开始。见名知意。

语法和规范：不遵循规范可以编译通过，但是显得特别low

字面值：一眼看上去就知道是多少的数据。
字面值在内存中有一块空间，有类型和值，缺点是：不能被重复利用。

变量：内存中的一块空间，有类型、值、名字。

在同一个方法中，变量不能重复声明。

Java中的变量必须赋值才能使用！也就是说，不能访问一个没有初始化的变量。

	int a;
	System.Out.println(a); 
	//是会报错的！！！
	报错提示：
		error: variable a might not have been initialized
                System.out.println(a);

注意：int i1,i2,i3 = 123;
表示声明三个变量，类型都是int类型，i1，i2没有赋值，只有i3被赋值。

变量的作用范围：出了方法的大括号就不认识了。

注意：在类的大括号内，方法的大括号外，是可以声明变量的，并且在这个类的所有方法内都可以访问该变量。这就是类级别的变量，但是在类级别是不能直接使用 类似 		System.out.println(k); 这样的语句的。

如果方法中有与该类级别变量同名的变量，则按照就近原则访问。
	public class Hello {

		int k = 11;
		public static void M() { //只有这个方法是静态的才能被其他方法访问到
			int k = 10;
			System.out.println(k); //10
		}
		public static void main(String[] args) {

			M(); //调用方法
		}
	}

	如果要调用类中的非静态方法，需要先实例化对象，然后通过对象才能访问。

注意：类内，方法外，不允许有Java语句，比如 System.out.println();

注意：

for(int j=0;j<10,j++){
	System.out.println(j);
}
//编译无法通过，因为j是for循环的变量
System.out.println(j)

-------------------------

int j;
for(j=0;j<10,j++){
	System.out.println(j);
}
//编译通过，因为j是外层的变量
System.out.println(j)

变量的分类：根据变量出现的位置可以将变量分为：
1.局部变量：方法里面的变量
2.成员变量：类里，方法外的变量。系统为成员变量赋默认值0，是可以访问的！

java中 单引号 '' 表示字符，只能有一个字符
	   双引号 "" 表示字符串

CRLF 是carriagereturnline feed的缩写。中文意思是回车换行。

LF是line feed的缩写，中文意思是换行。

错误解决：
	error: unmappable character for encoding GBK
原因：代码的编码和编译器所理解的编码不一致
解决：
	1.javac -encoding UTF-8 文件名
	2.将代码改成GBK编码

java中一个char占两个字节，如果用GBK编码，char是可以存一个中文的。
	System.out.println('露'); //并不会报错

转义： /t 

C:\Users\Administrator>native2ascii
中
\u4e2d

数据类型转换：
	如果整数没有超出byte,short,char的取值范围，可以直接将这个整数赋值给byte,short,char

	如果超出了范围会提示，损失精度。

整型：
	byte 	1  字节
	short   2
	int     4
	long    8

不能将容量大的数赋值给容量小的容器，但是可以强制转换。

如果将容量小的数，直接赋值给容量大的容器，会自动进行类型转换。


在多种类型混合运算的过程中，首先将所有数据转换成容量最大的那种，再进行运算。

构造方法：它是没有返回值类型的，也不能写void 
	[修饰符列表] 构造方法名(形式参数列表)
	{
		方法体
	}

构造方法的方法名，必须和类名一致 

构造方法的作用：
	1.创建对象
	2.初始化成员变量

构造方法的调用？
	new 构造方法名(实参); 在堆中开辟空间存储对象

构造方法也是可以重载的。

如果一个类没有提供构造方法，系统默认提供无参的。
如果自定义了构造方法，则采用自定义的。
new User(); 实质上是调用 User 类的构造方法。

成员变量只有在调用构造方法的时候才会被赋值，类加载时不会被赋值。


















学习进度：面向对象  56











