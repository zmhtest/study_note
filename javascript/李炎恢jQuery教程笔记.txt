## 李炎恢jQuery笔记

	$(function(){
		
		$('#box').css('color','red');

	});

$ 符号是jQuery对象的缩写。

alert($===jQuery);//true

.css() 是jQuery的一个内置函数

神奇的jQuery对象：
$ : jQery对象内部方法。
$():jQuery对象
$('#box'):jQuery对象
$('#box').css():整体返回的还是jQuery对象。
所以,还可以：
	$('#box').css().css().css()
可以一直连缀。

加载模式：

原生的JavaScript方法：

	window.onload = function(){
		let box = document.getElementById('box');
		box.style.color = 'red';
	}	

onload 必须等待所有的网页元素加载完毕，包括图片，导致页面处于假死状态，才能执行js代码。
只能执行一次，后面的会覆盖前面的！

$(function(){}):只需要页面的DOM加载完，无需等待图片，即可执行js代码。可以执行对此，不会覆盖前面的！

$(document).ready(function(){代码部分});

jQuery对象和原生DOM对象之间的转换：
1. $('#box')[0]
2. $('#box').get(0)

使用原生对象的好处，可以使用一些原生有的而jQuery没有的方法。

一个项目中引入多个js库，如何解决冲突？

jQuery库在最前面，$的所有权被其他库覆盖
解决:直接用jQuery代替$

jQuery库是引入的最后一个库，$的所有权是jQuery
解决：jQuery.noConflic();//剔除自己的$所有权
	  let $$ = jQuery;

---

第三章、常规选择器

连接css样式文件：
	<link rel='stylesheet' href='style.css' type='text/css' />

	#box{

		color:red;

	}

总结：属性作为函数的参数时，需要引号，在css样式文件中不用加引号。

ID唯一，在jQuery中，如果有多个同样ID的标签，jQuery只作用于第一个元素！！！

查看元素的个数：
1.$('.box').size()
2.$('.box').length

 > 子选择器
 空格 后代选择器

jQuery解决了很多浏览器的兼容问题。

js中undefined转为bool值就是false。

判断一个元素是否存在的方法：
	
	if($('#box').get(0)){}

	if($('#box')[0]){}

	if($('#box').length>0){}

	if($('#box').size()>0){}

-进阶选择器：

	群组选择器，元素之间是并列关系:span,em,box

	$('.clss1.clss2'):选定 class='class1 class2'的标签

	$('div.box'):选定div下的.box标签

	$('ul li*'):ul li下面的所有标签

注意：选择器并不是越复杂越好，越复杂，解释需要的时间越长。

-高级选择器

后代选择器方法：$('#box').find('.pox')
等同于：$('#box .pox')

子选择器：$('#box').children('p')
等同于：$('#box>p')

next选择器：同级下一个p,这个p也是一个限制条件，只是选择一个
$('#box +p')
$('#box').next(p)

同级，后面所有
$('#box').nextAll('p')
$('#box ~p')

以上两个方法，如果不传参，相当于传了 * 

同级上一个节点：prev()

同级上面所有：prevAll()

同级上下所有：siblings()

同级，非指定元素限定，就是限定非指定的元素，这个指定的元素作为界限
prevUntil('p') :向上找，遇 p 停止
nextUntil('p') ：向下找，遇 p 停止

过滤选择器(伪类选择器)
都是以 : 开头

	:first  $('li:first')
	:last	$('li:last')

	:not()  $('li:not(.red)')

	:even   $('li:even') 0开始的偶数
	:odd    $('li:odd') 奇数

	:eq()   $('li:eq(2)') 从0开始的第n个，后面从 -1 开始

	:gt(2)  $('li:gt(2)') 索引>2的，索引从0开始
	:lt(n)

	:focus   $('input:focus')

以上伪类都有对应的jQuery方法，使用这些方法效率更高！
	
	.first()
	.last()
	.not()
	.eq()

内容过滤器：

	:contain('aaa') 找到包含aaa这个文本节点的 父节点。 $('div:contain('aaa')')

	:empty()  $('div:empty()') 不能包含任何子元素的元素

	.has(.red) $('ul:has(.red)') 选择含有.red的ul，选择的是父元素
	等同于：$('ul').has('.red')

	:parent 选择有子元素的 $('div:parent') 选择有子元素的div

	parent()方法，找到某个节点的父节点。
	$('li').parent()

	parents(),当前元素的祖先节点
	$('li').parents()

	parentUntil('body'),当前元素的所有祖先节点，遇到body，停止选择，$('li').parents('body')

可见性选择器：
	
	:hidden
	:visible

	$('div:hidden').css('color','#ccc').show(1000) 隐藏的div

	$('div:visible') 可见的div

子元素过滤器：

	:first-child() 返回每个父元素下的第一个子元素，返回的是一个集合
	$('ul:first-child')
	$('ul:last-child')

	$('ul:only-child') 获取只有一个子元素的ul

	:nth-child(even) 偶数索引从1开始
	:nth-child(odd)  奇数

	:nth-child(2)
	:nth-child(2n)
	:nth-child(3n)
	可以很灵活使用 :nth-child()

其他选择器

	$('.red').is('li') .red是否属于li标签
	$('.red').is($('li')) .red 是否属于li jQuery对象
	$('.red').is($('li').get(0)) DOM对象也是可以的

	自定义规则
	$('.red').is(function(){
		return $(this).attr('title')=='列表三';//这里必须用$(this)来引用$('.red')这个jQuery对象
	})

	.hasClass('red') 某个元素中是否含有 .red 类
	$('li').eq(2).hasClass('red')

	$('li').slice(5,7) 切片工具，起始位置，结束位置，截取一个范围内的元素节点 5-6

	第二个参数为正时，由前往后找，当第二个参数为负时，由后往前找。

	.slice(0,-2) 从倒数第二往前选到0

	.end()找到前一个状态，同级或上一级

	.contents() 返回所有子节点，包括文本

	$('li').filter('.red,:first,:last')

	$('li').filter(function(){
		return $(this).attr('class')=='.red' && $(this).attr('title') == '列表三';
	})
	通过匿名回调函数，可以更精确选取元素。

###第五章基础DOM和css操作

	.html() 获取或者设置html内容，有html会自动解释

	.text() 获取文本内容，会自动过滤html标签，有html会自动转义

	$('input').val() 获取或设置表单的内容

	如果是下拉列表，可以通过传入一个数组来设置value首选项
	$('input').val(['男','女','编程']);

元素的属性操作：

	$('#box').attr('id') 获取属性id的值。

	$('#box').attr('title','标题')

	$('div').attr({
		//传递json设置多个键值对
		'title':'标题',
		'data':123
	})

	$('div').attr('title',function(index,value){
		return xxx;//把计算结果的值作为title的值。
	})
	index:当前操作对象的索引
	value:属性原来的值，如果原来没有这个属性，则原来的值是undefined，这是jQuery的一种防止报错的机制。

	获取多个css属性：
	let box = $('div').css(['color','width','height']);
	返回的是一个原生数组对象

	for(let i in box){
		alert(`${i}:${box[i]}`);
	}
	
	使用jQuery工具集
	$.each(box,function(attr,value){//
	//两个参数分别表示 键和值
		alert(attr+':'+value);

	})

	添加、删除css类：
	.addClass('.class1')
	.addClass('.class1 class2')
	.remove('.class1')
	.remove('class1 class2')

	切换类：
	$('div').click(function(){
		$(this).toggleClass('red');//默认样式和指定样式之间的 切换
		//let count=0;
		$(this).toggleClass('red size',count++%2==0);//通过计算，得出第二个参数的true或false
	})

	实现样式一和样式二的切换：

	$('div').click(function(){
		 $(this).toggleClass(function(){
		 	if($(this).hasClass('red')){
		 		$(this).removeClass('red');
		 		return 'green';
		 	}else{
		 		$(this).removeClass('green');
		 		return 'red';
		 	}
		 });
	});

一些常用的jQuery方法：

	width():可以直接获取或设置一个元素的width，都是已经处理好的数据。
	$('div').width() 返回的是number类型
	$('div').width(30) 默认单位是px
	$('div').width('30px'),也可以设置其他单位。

	$('div').width(function(index,width){

		return width-200;//直接减就可以，不用加 'px'

	})

	高度设置，跟 width 设置是一模一样的！

第六章 DOM节点操作
	
	动态创建jQuery节点：
	let box = $('<div id="box">节点</div>');
	$('body').append(box);

内部插入节点方法：

	1. 节点内容后面插入：
	$('div').append('<strong>DOM</strong>');
	在div内容后面插入

	2. $('div').append(function(index,html){
		//index指第几个div
		//html指div节点内容
		return '<strong> dom </strong>'+index+html;
	})

	3. 将子元素添加到父元素内容后面：
	$('strong').appendTo('div');//不需要创建，将已有的strong标签移入div

	4. 在节点内容前面插入：
	$('div').prepend('<strong>DOM</strong>');

	5. $('div').prepend(function(index,html){
		return 'xxx';
	})

	6. 将子元素添加到节点内容前面：
	$('strong').prependTo('div');


在jQuery中，匿名函数的第一个参数一般指 索引 ，第二个参数一般指所选元素的原来的值，可以再匿名函数内部通过计算改变原有的值！！！

外部插入命令：
	
	$('div').after('<strong>dom</strong>')
	在div的外部，后面插入

	$('div').before('xxx')
	在div外部的前面

	$('strong').insertAfter('div') 将现有的strong标签插入到div的后面

	$('strong').insertBefore('div') 将现有的strong插入到div前面

包裹：
	
	$('div').wrap(html标签) 用html标签包裹在div的外面
	可以是嵌套的html标签

	$('div').wrap(element) element为原生的DOM节点
	eg:$('div').wrap($('strong').get(0));

	或者 创建一个元素 document.createElement('strong');

	还可以通过一个匿名函数返回DOM原生对象
	.wrap(function(index){
		return '<strong></strong>'
	})

移除包裹：
	
	$('div').unwrap() 移除一层
	$('div').unwrap() 再次移除一层

	$('div').wrapAll('<strong />')
	表示将所有的div当成一个主体，然后用strong包裹

	$('div').wrapInner(html)
	在div的字内容包裹一层

节点操作:
	
	$('div').click(function(){

		alert();

	})

	$('div').clone(true).appendTo('body');
	true表示连同这个div的事件都一起克隆

	删除节点：
	$('div').remove(); 
	$('div').remove('.box'); 限定条件删除
	返回的是一个删除了的jQuery对象，还可以将其添加到body里面。相当于剪切功能。

	保留事件的删除节点：
	$('div').detach().appendTo('body');

	清空标签内容：
	$('div').empty()

	替换节点：
		$('div').replaceWith('<span>dom</span>');
	反过来的替换：
		$('<span>dom</span>').replaceAll('div')
	作用：完全替换div标签，包括内容，不保留事件。

第七章：表单选择器
	
	$('input[type=password]') 添加属性限制，使语义更加清晰

	$('input[name=pawd]') 添加属性限制，使语义更加清晰

	选择所有的表单，包括：textarea、select、button
	$(':input').size()
	$(':input[name=city]').size()

	选择所有的单行文本框
	$(':text')

	$(':password')
	$(':password[name=pwd]')

	单选框；
	$(':radio[name=sex]').eq(1)

	$('form:hidden') 最好限制范围

	<input type="text" disable="disable" name="user" />
	$('form:enabled') 选择可用的表单元素

	$('form:disabled')
	选择所有不可用元素：

	$('form:checked') 单选和复选是否选中，返回的是选中的元素本身

	$('form:selected') 返回选中的那个option项
	默认选定第一项，添加属性 multiple可以去除默认项

第八章：基础事件
	
	绑定一个事件
	$('input').bind('click',function(){})

	绑定多个事件到同一个处理函数
	$('input').bind('click dbclick',function(){})

	注：以上的匿名函数可以单独出来，用函数名代替即可

	绑定多个事件到不同的处理函数，使用json对象
	$('input').bind({

		'click':function(){},
		'mouseup':function(){},
		'mouseover':function(){}
		//是否加双引号都一样

	})
		
	删除绑定事件：
	$('input').unbind();删除全部事件

	$('input').unbind('click') 只删除click事件

	$('input').unbind('click',fn1);删除指定函数

- 简写事件：
	
	.resize() 文档改变了，浏览器窗口大小改变时触发。

	.scroll() 拖动滚动条触发

	.select(fn) 文本选定时触发

	.change(fn) 文本的值改变时触发

	$('form').submit(fn) 表单提交时触发,之作用于form

	.mouseover()和.mouseout()表示鼠标移入和移出的时候触发。那么 jQuery 还封装了另外 一组：.mouseenter()和.mouseleave()表示鼠标穿过和穿出的时候触发。那么这两组本质上有 什么区别呢？手册上的说明是：.mouseenter()和.mouseleave()这组穿过子元素不会触发， 而.mouseover()和.mouseout()则会触发。

	.keydown()、.keyup()返回的是键码，而.keypress 返回的是字符编码

	$('input').keydown(function(e){
		 alert(e.keyCode); //按下 a 返回 65 
	});


	$('input').keypress(function(e){
		 alert(e.charCode); //按下 a 返回 97 
	});

	.focus()和.blur()分别表示光标激活和丢失，事件触发时机是当前元素。事件绑定在当前元素。

	而.focusin() 和.focusout()也表示光标激活和丢失，但事件触发时机可以是子元素。 事件绑定在父元素。

复合事件：
	
	hover([fn1,]fn2) 当鼠标移入触发第一个 fn1，移出触发 fn2 	

	$('div').hover(
		function(){
		 	$(this).css('background','black'); //mouseenter 效果 },
		 function(){ 
		 	$(this).css('background','red'); //mouseleave 效果，可省略 
	 });

第九章：事件对象 event

	event.target 触发元素的DOM，点击的那个

	event.currentTarget 绑定的DOM，等同于this

	event.type 事件的类型

	event.data 事件调用时的外部数据,data可以是字符串、数组、对象
	$('input').bind('click',123,function(e){
		alert(e.data);
	})

	event.timeStamp 触发事件的时间戳

	event.which 鼠标的左中右键（1，2，3）或键盘按键

	altKey/shiftKey/ctrlKey:是否按下alt、shift、ctrl键，返回true、false

	e.relatedTarget 移入、移除元素，最接近的那个DOM元素

	pageX、clientX、screenX
	页面    视口     显示器
	其中，页面pageX、pageY可以很大。

	阻止冒泡：event.stopPropagation();

	默认行为：点击超链接会跳到指定页面，右击页面会弹出菜单...
	阻止表单提交：
	方法1：
	$('form').submit(function(e){
		e.preventDefault();
	})

	方法2：
	$('input').click(function(e){
		e.preventDefault();
	})

	阻止冒泡和禁止默认行为：
	直接：return false

第十章：高级事件

	模拟用户操作：	
	$('input').click(function(){
		alert('xxx');
	})

	$('input').trigger('click');
	//浏览器模拟input的click操作

	简化写法：
	$('input').click(function(){
		alert('xxx');
	}).trigger('click');

	trigger传递额外数据
	.trigger('click','aaa')
	.trigger('click',['a','b','c']);

	事件的第一个参数为事件对象，后面的参数都是形参。

	$('input').click(function(e,data1,data2){
		alert('data1'+'data2');
	}).trigger('click',['123','aaa']);//实参与形参一一对应
	//如果要传多个数据，必须要以中括号的形式[12,'aa',[1,2,3]]

	注意对比 trigger 和 bind 的传参。
	bind:event.data
	trigger:和匿名函数的形参一一对应。

	let data = [1,2,3];
	$(':input[name=btn]').bind('myclick',data,function(e,t1,t2){
		console.log(e);
		console.log(e.data);
		console.log(t1+'=='+t2);
	}).trigger('myclick',['t1','t2']);

自定义事件：
	
	由于自定义事件没有和任何硬件绑定，所以一般通过trigger触发。

	$('input').bind('myevent',function(){
		alert('自定义事件');
	}).trigger('myevent');
	//当载入或者刷新页面时，自动触发。

	常用事件的简写方法：就是在事件的后面 .事件方法()

	eg: 
		$('input').click(function(){alert('hello china')}).click();

trigger和triggerHandler的区别：

	trigger('submit');//提交后跳转
	不会阻止事件的默认行为

	//提交后不跳转，阻止事件的默认行为。
	triggerHandler('submit')

	trigger() 会执行所有
	triggerHandler() 只执行第一个

	trigger() 返回的是jQuery对象，可以实现连缀
	triggerHandler() 返回的是return值或undefined

	trigger() 会冒泡
	triggerHandler() 不会冒泡

命名空间；
	
	$('input').bind('click.abc',function(){
		alert('abc');
	})

	$('input').bind('click.xyz',function(){
		alert('xyz');
	})

	$('input').bind('mouseover.xyz',function(){
		alert('xyz');
	})

	解除绑定：
	$('input').unbind('click.abc')
	$('input').unbind('.xyz');//删除所有xyz命名空间下的事件。

	命名空间同样适用于 trigger()

	$('input').trigger('click.abc');//只弹窗一次

事件委托：
	
	把子元素的事件绑定到父元素上，语义清晰
	$('#box').delegate('.button','click',function(){
		$(this).clone().appendTo('#box');//连同子元素的事件一同克隆
	})
	
	删除事件委托：
	$('#box').undelegate('.button','click');

	on、off、one三个整合的方法，可以取代之前的bind、unbind、live、die、delegate、undelegate

	on可以完全取代bind的所有功能！
	$('.button').on('click',function(){
		xxx;
	})

	解除事件绑定；
	$('.button').off('click');

	使用 on() 来进行事件委托，和delegate的区别就是，两个参数的位置调换一下
	$('#box').on('click','.button',function(){xxx});

	解除事件委托:
	$('#box').off('click','.button');

	.one() 仅触发一次事件，再次点击则不会触发相应的事件

第十一章：动画效果

	




		































































学习进度：