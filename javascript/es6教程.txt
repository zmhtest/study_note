es6教程笔记--老萧 牧马人

变量的声明：

undefined：表示一个变量只声明而没有赋值。

新增区块作用域：{} 

let：定义变量，相当于var

const：定义常量，定义好后不能改变，但是可以改变对象object的属性值。

let和const都没有var的预解释和变量提升。 

		function show(){
			console.log(i);
			var i = 10;//预解释了！！！
		}
		show();
		结果：undefined，并不会报错

		function show(){
			console.log(i);//TDZ暂时死区
			let i = 10;//没有预解释
		}
		show();
		结果：直接报错：i is not defined


let不允许重复定义变量。		
		var a = 10;
		var a = 12;
		console.log(a);
		结果：12

		let a = 10;
		let a = 12;
		console.log(a);
		结果：Identifier 'a' has already been declared


for循环，有分父级作用域()和子级作用域{},优先使用子级作用域，如果子级作用域中没有则会使用父级作用域中的变量！！！

	for(var i=0;i<3;i++){

	}
	console.log(i);//用var定义相当于全局定义，可以访问到
	结果：3

	for(let i=0;i<3;i++){

		}
	console.log(i);//访问不到
	结果；i is not defined

	for(let i=0;i<3;i++){
		let i = 'aaa';//这里不叫重复定义，因为两个i在不同的作用域。
		console.log(i);
	}
	结果：打印三次 aaa，优先获取子级作用域中的i

建议；忘了var，以后就用let，对于不用改变的就用const！！！

		window.onload=function(){
			var inputs = document.querySelectorAll('input');
			console.log(inputs);

			for(let i=0;i<inputs.length;i++){
				inputs[i].onclick = function(){
					alert(i);
				}
			}
		};


		const arr = ['apple','banana'];
		arr.push('orange');
		arr.pop();
		console.log(arr);
说明：const定义的数组，虽然不能通过 arr = [''] 的方式修改，但是可以通过arr.push()或者arr.pop()方法进行修改。
因为对象本身是引用的关系。

如果真的想对象不变，可以使用
object.freeze(['apple','banana'])函数
此时，已经不能push和pop了

const arr = ['apple','banana']
arr.push('orange')
这样是可以的，如果想数组不被改变，可以使用 object.freeze(['apple','banana'])
这样来定义！！！

第二节：解构赋值

之前：
let arr = [1,2,3]
console.log(arr[0],arr[1],arr[2]);

现在：
let [a,b,c] = [1,2,3]
console.log(a,b,c)

注意：作用两边的结构和格式必须保持一致！！！

	let [a,[b,c]] = [1,[22,33]];
	console.log(a,b,c);
	注：右边数据是什么格式，左边就依样写成什么格式。

xxx is not define.
表示根本没有这个变量。没有定义、声明

json也是可以定义成这个结构的。

let {name='zxz',age,job:nickname} = {
	name:'zmh',
	age:23,
	job:'码农'
}
console.log(name,age,nickname)
可以起别名。

还可以赋默认值：

可以利用解构来快速交换两个变量的值！！！

let a = 12;
let b = 10;
let [a,b] = [b,a]

函数的传参也可以用解构

function show({a,b}){
	console.log(a,b)
}

show({a:1,b:2})


第三节：字符串模板以及字符串新增

字符串模板：
let name = 'zmh'
let age = 23;
let info = `my name is ${name},i am ${age} years old.`
反引号+${xxx}
注：反引号的应用类似shell中的命令输出。


可以使用 str.includes('xxx')返回true或者false；
来代替indexOf()：返回找到的位置，然后判断 

判断字符串是否以 xxx 开头：str.startsWith('xxx')

字符串是否以 xxx 结尾： 
str.endsWith('xxx')
应用:判断文件名以什么结尾

重复字符串：str.repeat('次数')
将字符串str重复多少次

字符串填充：往前填充：str.padStart()

往后填充：str.padEnd(整个字符串的长度,填充的内容)

函数参数可以设置默认值。

函数的变化：
1.函数的默认参数：
	function show({x=1,y=2}={}){
		console.log(x,y)
	}

	show();

2.函数的参数默认已经定义了，不能再用let或const重复定义！！！
也就是不能：

	function show(a,b){
		let a=10;//会报错！！！
	}	

	show(1,2);
var就是会覆盖传过来的参数，这样不好。

扩展运算符、rest运算符
...
作用1：可以展开数组：
比如:

作用2：可以将离散的数据组合成数组，多用于函数的传参与接收参数。

作用3：复制数组
let arr = [1,2,3]
let arr1 = [...arr]
表示将arr数组展开，然后赋给一个全新的数组。此时arr和arr1是两个完全不同的数组，互不影响！！！

数组复制的其他方法：
	let arr = [1,2,3]
	let arr1 = Array.from(arr);
	console.log(arr1)

使用Array.from()将json转成数组
	let json = {
		a:1,
		b:2,
		c:3,
		length:3
	}

	let arr = Array.from(json);
	console.log(arr);

字符串也可以使用 Array.from(I)
---

	let arr = ['apple','banana','pear'];

	console.log(arr.includes('banana'));//查找数组中是否有 xxx
	console.log(...arr);//将数组打散：apple banana pear
---
		function show(...arr){
			console.log(arr);
			console.log(...arr);

		};
		show(1,2,3,4);
		结果：返回一个数组[1, 2, 3, 4]
		10 2 32 4 又将数组拆开了
---
		function show(){
			console.log(arguments);

		};
		show(1,2,3,4);
		结果：arguments [1, 2, 3, 4]		
---
		function show(a,b,...c){
			console.log(a,b,c);

		};
		show(1,2,3,4);
		结果：1 2 [3, 4]， 将剩余的参数赋给c数组！

---
还可以先 ...[1,2,3] 当做参数传递，也就是解开了再传过去。
	function show(a,b,c){
			console.log(a,b,c);

		};
		show(...[1,2,3]);

---
箭头函数：
	
	形式1：(参数)=>return部分

	形式2：(参数1,参数2)=>{

		语句1;
		语句2;
		return xxx;

	}

用var定义一个全局变量，他是属于window的
top指的就是window对象！！！

注意：
	1.this问题，指定义函数所在的对象，不再是运行时所在的对象。
	2.箭头函数里面没有 arguments

	3. 剪头函数不能用作构造函数！

	let json = {
		a:1,
		show:function () {
			setTimeout(function(){
				console.log(this.a);
			},2000);
			
		}
	}

	json.show();//undefined
---
	let json = {
		a:1,
		show:function () {
			setTimeout(()=>{
				console.log(this.a);
			},2000);
			
		}
	结果：1 this就是指箭头函数所在的对象json
	
函数参数最后的 , 现在可以有了

-数组 

ES5中新增数组的循环：

arr.forEach()
arr.map()
arr.filter()
arr.some()
arr.every()
arr.reduce()
arr.reduceRight()
以上对数组的加工处理并不会影响原数组！！！

旧方法：
	let arr = ['apple','banana','orange'];
	for(let i=0;i<arr.length;i++){
		console.log(arr[i]);
	}

新方法：

	let arr = ['apple','banana','orange'];
	arr.forEach((val,index,item)=>{
		console.log(val);
		console.log(index);
		console.log(item);

	})
	//回调函数的三个参数分别表示数组每一项的 值、键、数组本身。

---
	没有return语句的 arr.map() 相当于arr.forEach()
所以，arr.map() 一般有返回值，也就是建立一种 映射 然后再 return 

	let arr = ['apple','banana','orange'];
	let arr1 = arr.map((item,index,arr)=>{

			let str =`${item}xxx${index}`;
			return str;

	})
	//说明：arr.map()函数返回的是一个数组，数组的项目是每次 return 的值。
	console.log(arr1);		
	返回的是一个经过整理的数组
---

arr.filter()过滤掉不符合要求的数据。

	let arr = ['apple','banana','orange'];
	let arr1 = arr.filter((item,index,arr)=>{
		
			return index>0;
			//符合条件的留下，不符合的去处
	})
	结果：["banana", "orange"]
---
	
		let arr = ['apple','banana','orange'];
		let arr1 = arr.some((item,index,arr)=>{
			
				return item=='banana';

		})

		console.log(arr1);

		结果：返回true、false，只要有一个符合条件就返回true
---

		let arr = ['banana','banana','banana'];
		let arr1 = arr.every((item,index,arr)=>{
			
				return item=='banana';

		})
		console.log(arr1);
		结果：true
---

		let arr = ['apple','banana','orange'];
		for(let val of arr){

			console.log(val);
		}
		结果：apple banana orange


		let arr = ['apple','banana','orange'];
		for(let key of arr.keys()){

			console.log(key);
		}

---

		let arr = ['apple','banana','orange'];
		for(let item of arr.entries()){

			console.log(item);
		}
		arr.entries()返回的是每一项的 [key,value]组成的数组
		[0, "apple"] [1, "banana"] [2, "orange"]

		for(let [key,value] of arr.entries()){

			console.log(key,value);
		}
---

数组新增的东西

  function list(){
     // 让类数组arguments拥有数组的方法slice，这个函数实现了简单把类数组转换成数组
     return Array.prototype.slice.call(arguments);
 }
 
 list(1,2,3);//[1,2,3]

prototype 属性允许您向对象添加属性和方法
注意： Prototype 是全局属性，适用于所有的Javascript对象。


prototype对象的引入：所有实例对象需要共享的属性和方法，都放在这个对象中，那些不需要共享的属性和方法，就放在构造函数中。


有四种方式可以实现构造函数的继承
1.调用apply方法

function Animal() {
    this.species = '动物'
}
Animal.prototype.getName = function() {
    console.log('我是动物')
}

function Cat() {
    Animal.apply(this, arguments)
}
var cat = new Cat()
cat.species    // 动物
cat.getName()  // undefined
这种方法可以继承父类构造函数的属性，但是无法继承prototype属性，即父类中共享的方法和属性。

ES6的区别是子类构造函数的proto指向父类构造函数


function f1(){

　　　　var n=999;

　　　　function f2(){
　　　　　　alert(n); // 999
　　　　}

　　}
在上面的代码中，函数f2就被包括在函数f1内部，这时f1内部的所有局部变量，对f2都是可见的。但是反过来就不行，f2内部的局部变量，对f1就是不可见的。

这就是Javascript语言特有的"链式作用域"结构（chain scope），

子对象会一级一级地向上寻找所有父对象的变量。所以，父对象的所有变量，对子对象都是可见的，反之则不成立。

既然f2可以读取f1中的局部变量，那么只要把f2作为返回值，我们不就可以在f1外部读取它的内部变量了吗！


上面代码中的f2函数，就是闭包。

各种专业文献的闭包定义都非常抽象，我的理解是: 闭包就是能够读取其他函数内部变量的函数。

由于在javascript中，只有函数内部的子函数才能读取局部变量，所以说，闭包可以简单理解成“定义在一个函数内部的函数“。

所以，在本质上，闭包是将函数内部和函数外部连接起来的桥梁。


这里有一个地方需要注意，函数内部声明变量的时候，一定要使用var命令。如果不用的话，你实际上声明了一个全局变量！

---

-直接使用babel编译es6成es5
babel es6.js -o compiled.js  

安装babel的方法：
1.全局安装babel-cli
	cnpm -g install babel-cli

2. 进入项目根目录，将babel-cli安装到项目
	cnpm install --save-dev babel-cli

3.安装解释es6的babel-preset-es2015
	cnpm install --save-dev babel-preset-2015

4.项目根目录建 .babelrc 文件，写入
	{"presets":["es2015"]}

5.编译js文件
	babel xxx.js -o compiled.js

---


	














	

