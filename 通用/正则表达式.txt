布尔教育正则表达式笔记

概念：正则就是字符串规则表达式

表示方法 $patten = '/正则表达式/';

PHP中常用的两个正则函数
1.preg_match_all($patten,$str,$res);
用正则来匹配字符串，返回匹配结果在一个数组$res中
2.preg_replace($patten,$replace,$str);
将在$str中用正则匹配到的字符用$replace来替换，返回替换后的字符串

字符边界：
	^ : 字符串开始
	$ : 字符串结尾
	\b : 单词的开始或者结尾（单词边界）注意：正则不认识中文
	\B : 单词的非边界

字符簇
	. 任意字符，不含换行（如果有换行，可以使用s模式来作为单行匹配）
	\w 字母，数字，_
	\W 
	\d 数字
	\D 非数字
	\s 空白字符，比如空格，回车，tab键
	\S 非空白字符
	\t  匹配一个制表符 
	\n  匹配一个换行符 
	\r  匹配一个回车符 

单词匹配：
关键是边界
'/\bhis\b/'

集合(原子表)与补集
	[123]的补集[^123]
	^[^123]表示开头不是1，2，3

找几个？
	* 匹配前面子表达式0次或多次
	+ 一次或多次
	? 0次或1次
	{n} 就是n次
	{n,}大于n次
	{n,m}n到m次

或者 |
放在两个表达式之间，表示匹配符合多种情况
比如纯数字或者纯字母： '/\b\d\b | \b[a-zA-Z]\b/'

贪婪与非贪婪
概念：贪婪就是在用正则式去匹配字串时，尽量多的匹配，
这样的结果是匹配出一个长长的字串，往往不是我们想要的，
默认是贪婪匹配，
可以通过在数量修饰符后面加?来阻止贪婪，这样得到的就是一个一个比较短的符合要求的结果
例子：
$str = 'ksda good  goooood good kl s ja dfs dk '
// g()d ,god
$patt = '/g.+d/'; 
preg_match_all($patt, $str, $res);
print_r($res); 
$patt = '/g.+?d/'; 
preg_match_all($patt, $str, $res);
print_r($res); // god , good


采集手机号
	手机号的特点：共有11位，首位为 1
	第二位为[3578]
	后面数字\d{9}

	'/\b1[3578]\d{9}\b/'

反向引用或者后向引用:
	(子表达式1)(子表达式2)\1\2
	就是用括号把一个子表达式括起来，后面用\n 来引用，n表示前面的第几个括号的表达式！！！
	一般用于匹配重复的字符部分
比如匹配首字符与尾字符相同的单词
$patt = '/\b([a-zA-Z]\w+\1)\b/'
匹配连续出现的四个数字
$patt = '/\d{4}/'
匹配连续出现的四个相同的数字
$patt = '/(\d)\1\1\1/'

替换手机号的中间四位
$patt = '/\b(\d{3})\d{4}(\d{4})\b/';
preg_replace($patt,'\1****\2',$str);

模式修饰符
	i：忽略大小写
	g：全局匹配
	s：把所有的字串，即使有换行，都看成是单行
	u: 采用Unicode编码来解释
注意：中文字符的Unicode范围是：4e00-9fa5
比如我要匹配中文 “朱明浩”
$str = "朱明浩";
$patt = '/^[\x{4e00}-\x{9fa5}]+$/u';

如果要匹配出现在正则表达式内具有特殊含义的字符，必须要用 \ 进行转义
特别字符 说明 
$ 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\n' 或 '\r'。要匹配 $ 字符本身，请使用 \$。 
( ) 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)。 
* 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。 
+ 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。 
. 匹配除换行符 \n之外的任何单字符。要匹配 .，请使用 \。 
[  标记一个中括号表达式的开始。要匹配 [，请使用 \[。 
? 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。 
\ 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， 'n' 匹配字符 'n'。'\n' 匹配换行符。序列 '\\' 匹配 "\"，而 '\(' 则匹配 "("。 
^ 匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^。 
{ 标记限定符表达式的开始。要匹配 {，请使用 \{。 
| 指明两项之间的一个选择。要匹配 |，请使用 \|。 

[0-9\.\-] //匹配所有的数字，句号和减号 

[ \f\r\t\n] //匹配所有的白字符








传说中的CURL

curl可以实现浏览器的所有功能！！！
学好网络知识，再回头学习CURL!!!

libcurl目前支持http、https、ftp、gopher、telnet、dict、file和ldap协议。libcurl同时也支持HTTPS认证、HTTP POST、HTTP PUT、 FTP 上传(这个也能通过PHP的FTP扩展完成)、HTTP 基于表单的上传、代理、cookies和用户名+密码的认证。 

使用方法：首先要在php.ini中打开php_curl 扩展 


使用cURL函数的基本思想是先使用 curl_init() 初始化一个cURL会话，接着你可以通过 curl_setopt() 设置你需要的全部选项，然后使用 curl_exec() 来执行会话，当执行完会话后使用 curl_close() 关闭会话。

<?php 
	$ch = curl_init("http://localhost/php_curl/test.php");
	//或者利用 curl_setopt($ch,CURLOPT_URL,"xxx")
	
	//只有设置了这句，执行curl_exec才会有返回值！！！
	curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);

	// CURLOPT_HEADER   启用时会将头文件的信息作为数据流输出。 设置为false或者0时，则不输出！！！
	curl_setopt($ch,CURLOPT_HEADER,0);
	$res = curl_exec($ch);
	var_dump($res);
	curl_close($ch);

 ?>

速度快，比file_getcontents()快

利用curl来发送post请求：

<?php 
	$ch = curl_init();
	$url = 'localhost/php_curl/post.php';
	curl_setopt($ch,CURLOPT_URL,$url);
	curl_setopt($ch,CURLOPT_RETURNTRANSFER,1);

	// CURLOPT_POST   启用时会发送一个常规的POST请求，类型为：application/x-www-form-urlencoded，就像表单提交的一样。  
	curl_setopt($ch,CURLOPT_POST,1);
	curl_setopt($ch,CURLOPT_POSTFIELDS,'id=2&name=admins');

	//这里接受的结果就是请求页面输出的内容
	$res = curl_exec($ch);
	echo $res;

	//用完一定要关，否则会占用很大内存！！！
	curl_close($ch);
 ?>

----
李炎恢-正则表达式























